/*
Action Plans v4
Updated by David Schach 2021


Action Plans v3
Force.com Labs 2011
http://appexchange.salesforce.com/listingDetail?listingId=a0N30000003HcINEA0

BSD 3-Clause License

Copyright (c) 2021, salesforce.com, inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
@IsTest
private class ActionPlansObjectTriggersTest {

	static Action_Plans_Settings__c aps;

	@TestSetup
	static void makeData(){
		aps = Action_Plans_Settings__c.getOrgDefaults();
		aps.Chatter_Object_Brag__c = true;
		aps.Default_Object_on_Lead_Conversion__c = 'Contact';
		try{
			upsert aps;
		} catch (Exception e){
			update aps;
		}
	}

	@IsTest
	private static void testAccountTrigger(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'account', 1 );
		Account a = [SELECT Id FROM Account WHERE Id = :ap.Account__c];

		// Verifies that action plans are deleted when removing related object
		Test.startTest();
		delete a;
		Test.stopTest();
		List<ActionPlan__c> lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 0);

		// Verifies catch is working fine
		ActionPlansTestUtilities.forceError = true;
		try{
			undelete a;
		} catch(Dmlexception e){
			System.assert(e.getMessage().contains(System.Label.ap_RelObjUndeleteError));
		}
		ActionPlansTestUtilities.forceError = false;

		// Verifies that action plans are undeleted when restoring related object
		undelete a;
		lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 1);

		// Verifies that action plans that are in recycle bin are removed when deleting the related object
		delete ap;
		delete a;
		lAp = [SELECT Id, Name, LastModifiedDate FROM ActionPlan__c WHERE Account__c = :a.Id AND IsDeleted = true ALL ROWS];
		System.assert(lAp.size() == 0);
	}

	@IsTest
	private static void testCampaignTrigger(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'campaign', 1 );
		Campaign c = [SELECT Id FROM Campaign WHERE Id = :ap.Campaign__c];

		// Verifies that action plans are deleted when removing related object
		Test.startTest();
		delete c;
		Test.stopTest();
		List<ActionPlan__c> lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 0);

		// Verifies catch is working fine
		ActionPlansTestUtilities.forceError = true;
		try{
			undelete c;
		} catch(Dmlexception e){
			System.assert(e.getMessage().contains(System.Label.ap_RelObjUndeleteError));
		}
		ActionPlansTestUtilities.forceError = false;

		// Verifies that action plans are undeleted when restoring related object
		undelete(c);
		lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 1);

		// Verifies that action plans that are in recycle bin are removed when deleting the related object
		delete ap;
		delete c;
		lAp = [SELECT Id, Name, LastModifiedDate FROM ActionPlan__c WHERE Campaign__c = :c.Id AND isDeleted = true ALL ROWS];
		System.assert(lAp.size() == 0);
	}

	@IsTest
	private static void testCaseTrigger(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'case', 1 );
		Case c = [SELECT Id FROM Case WHERE Id = :ap.Case__c];

		// Verifies that action plans are undeleted when restoring related object
		Test.startTest();
		delete c;
		Test.stopTest();
		List<ActionPlan__c> lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 0);

		// Verifies catch is working fine
		ActionPlansTestUtilities.forceError = true;
		try{
			undelete c;
		} catch(Dmlexception e){
			System.assert(e.getMessage().contains(System.Label.ap_RelObjUndeleteError));
		}
		ActionPlansTestUtilities.forceError = false;

		// Verifies that action plans are undeleted when restoring related object
		undelete c;
		lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 1);

		// Verifies that action plans that are in recycle bin are removed when deleting the related object
		delete ap;
		delete c;
		lAp = [SELECT Id, Name, LastModifiedDate FROM ActionPlan__c WHERE Case__c = :c.Id AND isDeleted = true ALL ROWS];
		System.assert(lAp.size() == 0);
	}

	@IsTest
	private static void testContactTrigger(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'contact', 1 );
		Contact c = [SELECT Id FROM Contact WHERE Id = :ap.Contact__c];

		// Verifies that action plans are undeleted when restoring related object
		Test.startTest();
		delete c;
		Test.stopTest();
		List<ActionPlan__c> lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 0);

		// Verifies catch is working fine
		ActionPlansTestUtilities.forceError = true;
		try{
			undelete c;
		} catch(Dmlexception e){
			System.assert(e.getMessage().contains(System.Label.ap_RelObjUndeleteError));
		}
		ActionPlansTestUtilities.forceError = false;

		// Verifies that action plans are undeleted when restoring related object
		undelete c;
		lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 1);

		// Verifies that action plans that are in recycle bin are removed when deleting the related object
		delete ap;
		delete c;
		lAp = [SELECT Id, Name, LastModifiedDate FROM ActionPlan__c WHERE Contact__c = :c.Id AND isDeleted = true ALL ROWS];
		System.assert(lAp.size() == 0);
	}

	@IsTest
	private static void testContractTrigger(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'contract', 1 );
		Contract c = [SELECT Id FROM Contract WHERE Id = :ap.Contract__c];

		// Verifies that action plans are undeleted when restoring related object
		Test.startTest();
		delete c;
		Test.stopTest();
		List<ActionPlan__c> lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 0);

		// Verifies catch is working fine
		ActionPlansTestUtilities.forceError = true;
		try{
			undelete c;
		} catch(Dmlexception e){
			System.assert(e.getMessage().contains(System.Label.ap_RelObjUndeleteError));
		}
		ActionPlansTestUtilities.forceError = false;

		// Verifies that action plans are undeleted when restoring related object
		undelete c;
		lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 1);

		// Verifies that action plans that are in recycle bin are removed when deleting the related object
		delete ap;
		delete c;
		lAp = [SELECT Id, Name, LastModifiedDate FROM ActionPlan__c WHERE Contract__c = :c.Id AND isDeleted = true ALL ROWS];
		System.assert(lAp.size() == 0);
	}

	@IsTest
	private static void testLeadTrigger(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'lead', 1 );
		Lead l = [SELECT Id FROM Lead WHERE Id = :ap.Lead__c];

		// Verifies that action plans are undeleted when restoring related object
		Test.startTest();
		delete l;
		Test.stopTest();
		List<ActionPlan__c> lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 0);

		// Verifies catch is working fine
		ActionPlansTestUtilities.forceError = true;
		try{
			undelete l;
		} catch(Dmlexception e){
			System.assert(e.getMessage().contains(System.Label.ap_RelObjUndeleteError));
		}
		ActionPlansTestUtilities.forceError = false;

		// Verifies that action plans are undeleted when restoring related object
		undelete l;
		lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 1);

		// Verifies that action plans that are in recycle bin are removed when deleting the related object
		delete ap;
		delete l;
		lAp = [SELECT Id, Name, LastModifiedDate FROM ActionPlan__c WHERE Lead__c = :l.Id AND isDeleted = true ALL ROWS];
		System.assert(lAp.size() == 0);
	}

	@IsTest
	private static void testOpportunityTrigger(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'opportunity', 1 );
		Opportunity o = [SELECT Id FROM Opportunity WHERE Id = :ap.Opportunity__c];

		// Verifies that action plans are undeleted when restoring related object
		Test.startTest();
		delete o;
		Test.stopTest();
		List<ActionPlan__c> lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 0);

		// Verifies catch is working fine
		ActionPlansTestUtilities.forceError = true;
		try{
			undelete o;
		} catch(Dmlexception e){
			System.assert(e.getMessage().contains(System.Label.ap_RelObjUndeleteError));
		}
		ActionPlansTestUtilities.forceError = false;

		// Verifies that action plans are undeleted when restoring related object
		undelete o;
		lAp = [SELECT Id FROM ActionPlan__c WHERE Id = :ap.Id];
		System.assert(lAp.size() == 1);

		// Verifies that action plans that are in recycle bin are removed when deleting the related object
		delete ap;
		delete o;
		lAp = [SELECT Id, Name, LastModifiedDate FROM ActionPlan__c WHERE Opportunity__c = :o.Id AND isDeleted = true ALL ROWS];
		System.assert(lAp.size() == 0);
	}

	@IsTest
	static void testLeadConversionContact(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'lead', 1 );
		Lead l = [SELECT Id FROM Lead WHERE Id = :ap.Lead__c];

		Action_Plans_Settings__c aps = Action_Plans_Settings__c.getInstance();
		aps.Default_Object_on_Lead_Conversion__c = 'Contact';
		try{
			upsert aps;
		} catch (Exception e){
			update aps;
		}

		User u = testutil.createTestUser();

		Test.startTest();
		System.runAs(u){
			System.assertEquals(1, [SELECT Count() FROM ActionPlan__c WHERE Lead__c != null]);

			Database.LeadConvert lc = new Database.LeadConvert();
			lc.setDoNotCreateOpportunity(true);
			lc.setLeadId(l.id);

			LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted = true LIMIT 1];
			lc.setConvertedStatus(convertStatus.MasterLabel);

			Database.LeadConvertResult lcr = Database.convertLead(lc);
			System.assert(lcr.isSuccess());
		}


		System.assertEquals(1, [SELECT Count() FROM ActionPlan__c WHERE Contact__c != null]);

		delete [SELECT Id FROM Account];

		Test.stopTest();

		System.assertEquals(0, [SELECT Count() FROM ActionPlan__c]);

	}

	@IsTest
	static void testLeadConversionAccount(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'lead', 1 );
		Lead l = [SELECT Id FROM Lead WHERE Id = :ap.Lead__c];

		User u = testutil.createTestUser();

		Test.startTest();
		System.runAs(u){
			Action_Plans_Settings__c aps = Action_Plans_Settings__c.getInstance();
			aps.Default_Object_on_Lead_Conversion__c = 'Account';
			try{
				upsert aps;
			} catch (Exception e){
				update aps;
			}

			System.assertEquals(1, [SELECT Count() FROM ActionPlan__c WHERE Lead__c != null]);

			Database.LeadConvert lc = new Database.LeadConvert();
			lc.setDoNotCreateOpportunity(true);
			lc.setLeadId(l.id);

			LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted = true LIMIT 1];
			lc.setConvertedStatus(convertStatus.MasterLabel);

			Database.LeadConvertResult lcr = Database.convertLead(lc);
			System.assert(lcr.isSuccess());
		}

		System.assertEquals(1, [SELECT Count() FROM ActionPlan__c WHERE Account__c != null]);

		Test.stopTest();

		List<Account> aList = [SELECT Id FROM Account WHERE IsDeleted = true ALL ROWS];

		undelete aList;

		System.assertNotEquals(0, [SELECT Count() FROM ActionPlan__c]);

	}

	@IsTest
	static void testLeadConversionOpportunity(){

		ActionPlansTestUtilities testutil = new ActionPlansTestUtilities();
		ActionPlan__c ap = testutil.createNewActionPlan( 'lead', 1 );
		Lead l = [SELECT Id FROM Lead WHERE Id = :ap.Lead__c];

		User u = testutil.createTestUser();

		Test.startTest();
		System.runAs(u){

			Action_Plans_Settings__c aps = ActionPlansUtilities.getCustomSetting();
			aps.Default_Object_on_Lead_Conversion__c = 'Opportunity';
			try{
				upsert aps;
			} catch (Exception e){
				update aps;
			}

			System.assertEquals(1, [SELECT Count() FROM ActionPlan__c WHERE Lead__c != null]);

			Database.LeadConvert lc = new Database.LeadConvert();
			lc.setDoNotCreateOpportunity(false);
			lc.setLeadId(l.id);

			LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted = true LIMIT 1];
			lc.setConvertedStatus(convertStatus.MasterLabel);

			Database.LeadConvertResult lcr = Database.convertLead(lc);
			System.assert(lcr.isSuccess());
		}

		System.assertEquals(1, [SELECT Count() FROM ActionPlan__c WHERE Opportunity__c != null]);

		Test.stopTest();

	}
}