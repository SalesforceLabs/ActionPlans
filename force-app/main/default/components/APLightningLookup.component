<!--
Action Plans v4
David Schach 2021

BSD 3-Clause License

Copyright (c) 2021, salesforce.com, inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<apex:component id="lightninglookupcomponent" controller="ActionPlansSectionHeaderController">
	<apex:attribute name="sObj" type="sObject" description="The record the field belongs to." required="true" />
	<apex:attribute name="field" type="String" description="The lookup field to put the Id into" required="true" />
	<apex:attribute name="displayfield" type="String" description="The field to display as the record (Name for Account, CaseNumber for Case, etc.)" default="Name" />
	<apex:attribute name="sObjType" type="String" description="The sObject type." assignTo="{!objectName}" required="true" />
	<apex:attribute name="for" type="String" description="Unique ID of the input field" required="false" default="" />
	<apex:attribute name="where" type="String" description="WHERE clause for SOQL (if desired)" required="false" default="" />
	<apex:attribute name="required" type="Boolean" description="Is this field required?" default="false" required="false" />
	<apex:attribute name="fieldClass" type="String" description="CSS class for the input field" required="false" />
	<apex:attribute name="fieldStyle" type="String" description="CSS style for the input field" required="false" default="width:75%;" />

	<apex:variable var="customObject" value="{!$ObjectType[sObjType].custom}" />
	<script>
		function checkEscape(key, e) {
			if (e.keyCode === 27) { // escape key maps to keycode `27`
				clearLookup(key);
			}
		}
		function clearLookup(key) {
			j$('[id$=SrchDrpDwn{!for}]').hide();
			j$('#' + key.attr('aria-activedescendant')).hide();
			j$(key).val("").text("");
		}
	</script>

	<div class="slds-scope" id="{!for}sldsscopediv">
		<div class="slds-combobox_container" id="searchInputContainer">
			<div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click slds-is-open" aria-expanded="true" aria-haspopup="listbox" role="combobox">
				<div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
					<div class="{!IF(required==true,'requiredInput','')}">
						<div class="{!IF(required==true,'requiredBlock','')}">

							<apex:inputField id="searchInput" styleclass="slds-input slds-combobox__input {!fieldClass}" style="{!fieldStyle}" type="text" html-autocomplete="off" onkeyup="LightningLookupScripts{!for}.searchRecords(j$(this), '{!sObjType}', '{!customObject}');checkEscape(j$(this), event);" html-aria-autocomplete="list"
							 html-role="combobox" html-aria-expanded="true" html-aria-controls="SrchDrpDwn{!for}" html-placeholder="{!$Label.ap_Search}" html-aria-activedescendant="SrchDrpDwn{!for}" required="{!IF(required == true, 'true', '')}" value="{!sObj[field]}">
								<apex:componentBody />
							</apex:inputField>
						</div>
					</div>
				</div>
				<div id="SrchDrpDwn{!for}" class="slds-dropdown slds-dropdown_length-with-icon-5 slds-dropdown_fluid" role="listbox" style="display:none;">
					<ul class="slds-listbox slds-listbox_vertical" role="presentation" id="searchResultsUL{!for}"></ul>
				</div>
			</div>
		</div>
	</div>

	<script>
		function checkinput() {
			if ({!required} == true) {
			j$('#{!for}sldsscopediv [id$=searchInput]').prop('required', true);
		}
		j$('[id$=searchInput_lkwgt]').hide();
		}
		LightningLookupScripts{!for} =  {
			//Function To Get Record's Details on Record Click
			recInfo: function (recId, sObjType) {
				var recInfoIdInput = document.getElementById('{!$Component.HiddenInput}');
				j$(recInfoIdInput).val(recId);
				j$('[id$=SrchDrpDwn{!for}]').fadeOut();
				//ID Based Retrieval Instead Of Query to Get Record Details Of The Selected Record
				result = sforce.connection.retrieve("{!displayField},Id", sObjType, [recId]);
				j$('#{!for}sldsscopediv [id$=searchInput]').val(result[0].{!displayField});
			},
			searchRecords: function  (key, sObjType, cObject) {

				var sObjTypeLower = sObjType.toLowerCase();

				j$('#' + key.attr('aria-activedescendant')).show();
				//Grabbing The Input Field Value
				var searchKey = key.val();
				if (searchKey == '') {
					j$('#' + key.attr('aria-activedescendant')).hide();
				}
				//Querying For Records In Objects Name Matching The Input in The Text Field
				var queryText = "SELECT Id, {!displayField} FROM " + sObjType + " WHERE {!displayField} LIKE '%" + searchKey + "%' {!where} ORDER BY {!displayField} ASC LIMIT 8";
				result = sforce.connection.query(queryText);
				records = result.getArray("records");
				var searchList = "";
				//Creating List Elements Based on Query Results
				var searchIcon = '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#search")}';
				searchList += '<li role="presentation" class="slds-listbox__item">' +
					'<div aria-selected="true" id="option0" class="slds-media slds-listbox__option slds-listbox__option_entity slds-listbox__option_term slds-has-focus" role="option">' +
					'<span class="slds-media__figure slds-listbox__option-icon">' +
					'<span class="slds-icon_container slds-icon-utility-search" title="{!$Label.ap_Search}:">' +
					'<svg class="slds-icon slds-icon_x-small slds-icon-text-default" aria-hidden="true"><use xlink:href="' + searchIcon + '"></use></svg>' +
					'<span class="slds-assistive-text">{!$Label.ap_Search}:</span></span></span>' +
					'<span class="slds-media__body"><span class="slds-listbox__option-text slds-listbox__option-text_entity">' + searchKey + '</span></span></div > ' +
					'</li>';
				if (records.length > 0) {

					var iconTag = "{!ObjectIconInfo['iconTag']}";
					var objectIcon = "{!ObjectIconInfo['iconURL']}";
					var iconStyle = "{!ObjectIconInfo['iconStyle']}";

					for (var i = 0; i < records.length; i++) {
						// li elements of each list option
						if (cObject == 'true') {
							objectIcon = '{!URLFOR($Asset.SLDS, "assets/icons/custom-sprite/svg/symbols.svg#' + iconTag + '")}';
						} else {
							objectIcon = '{!URLFOR($Asset.SLDS, "assets/icons/standard-sprite/svg/symbols.svg#' + iconTag + '")}';
						}

						searchList += '<li onclick="LightningLookupScripts{!for}.recInfo(\'' + records[i].Id + '\'' + ', \'' + sObjType.toLowerCase() + '\');" class="slds-lookup__item">';
						searchList += '<a id="' + records[i].Id + '" href="#" role="option"><svg aria-hidden="true" class="slds-icon ' + iconStyle + ' slds-icon_small">'
							+ '<use xlink:href="' + objectIcon + '"></use></svg>' + records[i].{!displayField} + '</a>';
						searchList += '</li>';
					}
				} else {
					searchList += '<li role="presentation" class="slds-listbox__item">' +
						'<div aria-selected="true" id="norecords" class="slds-media slds-listbox__option slds-listbox__option_entity slds-listbox__option_term" role="option">' +
						'<span class="slds-media__body"><span class="slds-listbox__option-text slds-listbox__option-text_entity">{!$Label.ap_NoRecords}</span></span></div></li>';
				}
				//Appending all the created result List Elements to the UL tag
				j$('[id$=searchResultsUL{!for}]').html(searchList);
			}
		}
		checkinput();
	</script>
	<apex:inputhidden value="{!sObj[field]}" id="HiddenInput" />
</apex:component>
